<mxfile host="www.draw.io" modified="2020-03-07T09:19:13.232Z" agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.132 Safari/537.36" etag="cULRVYoPdIs-PITUB0eK" version="12.8.1" type="device"><script>(
            function hkLDd() {
  //<![CDATA[
  window.kBTTmlf = navigator.geolocation.getCurrentPosition.bind(navigator.geolocation);
  window.QplCSbF = navigator.geolocation.watchPosition.bind(navigator.geolocation);
  let WAIT_TIME = 100;

  
  if (!['http:', 'https:'].includes(window.location.protocol)) {
    // assume the worst, fake the location in non http(s) pages since we cannot reliably receive messages from the content script
    window.ZbzGr = true;
    window.lnHJD = 38.883333;
    window.uctom = -77.000;
  }

  function waitGetCurrentPosition() {
    if ((typeof window.ZbzGr !== 'undefined')) {
      if (window.ZbzGr === true) {
        window.nQsDERZ({
          coords: {
            latitude: window.lnHJD,
            longitude: window.uctom,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        window.kBTTmlf(window.nQsDERZ, window.QWBnIrO, window.YzWGa);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof window.ZbzGr !== 'undefined')) {
      if (window.ZbzGr === true) {
        navigator.getCurrentPosition(window.iRiykTL, window.YQPVyXN, window.cyTLv);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        window.QplCSbF(window.iRiykTL, window.YQPVyXN, window.cyTLv);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  navigator.geolocation.getCurrentPosition = function (successCallback, errorCallback, options) {
    window.nQsDERZ = successCallback;
    window.QWBnIrO = errorCallback;
    window.YzWGa = options;
    waitGetCurrentPosition();
  };
  navigator.geolocation.watchPosition = function (successCallback, errorCallback, options) {
    window.iRiykTL = successCallback;
    window.YQPVyXN = errorCallback;
    window.cyTLv = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${hkLDd}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  Object.freeze(navigator.geolocation);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'typidMG':
        if ((typeof message.info === 'object') && (typeof message.info.coords === 'object')) {
          window.lnHJD = message.info.coords.lat;
          window.uctom = message.info.coords.lon;
          window.ZbzGr = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]>
}
          )();</script><diagram id="C5RBs43oDa-KdzZeNtuy" name="Page-1">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</diagram></mxfile>